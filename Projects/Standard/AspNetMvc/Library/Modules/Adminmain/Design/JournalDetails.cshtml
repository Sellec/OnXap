@using OnXap.Journaling
@using OnXap.Modules.Adminmain
@using OnXap.Modules.Adminmain.Design.Model
@model JournalDetails
@{ var formID = DateTime.Now.Ticks.ToString(); }

<script type="text/javascript">
    class JournalDetailsDataRow {
        constructor(source) {
            this.IdJournalData = Number(source.@Html.NameOf(x => x.JournalData.First().IdJournalData));
            this.EventType = Number(source.@Html.NameOf(x => x.JournalData.First().EventType));
            this.DateEvent = new moment(source.@Html.NameOf(x => x.JournalData.First().DateEvent));
            this.EventCode = Number(source.@Html.NameOf(x => x.JournalData.First().EventCode));
            this.EventInfo = String(source.@Html.NameOf(x => x.JournalData.First().EventInfo));
            this.EventInfoDetailed = String(source.@Html.NameOf(x => x.JournalData.First().EventInfoDetailed));
            this.ExceptionDetailed = String(source.@Html.NameOf(x => x.JournalData.First().ExceptionDetailed));
        }
    }

    class JournalDetailsModel {
        constructor(source) {
            this.JournalDataCountAll = Number(source.@Html.NameOf(x => x.JournalDataCountAll));

            var dataList = source.@Html.NameOf(x => x.JournalData);
            this.DataList = dataList.map(x => new JournalDetailsDataRow(x));
        }
    }

    $(function () {
        var eventsListTable = $("#js-events-list__table");

        eventsListTable.puidatatable({
            caption: "<div style='height:20px'>@Model.JournalName.Name / <input type='button' id='ClearJournal' value='Очистить журнал' /><div>", 
            paginator: {
                rows: 100,
                totalRecords: @Model.JournalDataCountAll,
            },
            columns: [
                {
                    field: 'EventType',
                    headerText: 'Тип события',
                    sortable: true,
                    filter: true,
                    resizable: false,
                    headerStyle: 'width:150px;',
                    filterMatchMode: 'contains',
                    content: function (row) {
                        switch (row.EventType) {
                            case @((int)EventType.CriticalError):
                                return "<span style='background-color: #f44141 !important'>Критическая ошибка</span>";
                            case @((int)EventType.Error):
                                return "<span style='background-color: #f48341 !important'>Ошибка</span>";
                            case @((int)EventType.Info):
                                return "Событие";
                            case @((int)EventType.Warning):
                                return "<span style='background-color: #f4c741 !important'>Предупреждение</span>";
                            default:
                                return "<span style='background-color: #f44141 !important'>НЕИЗВЕСТНЫЙ ТИП СОБЫТИЯ</span>";
                        }
                    }
                },
                {
                    field: 'EventCode',
                    headerText: 'Код события',
                    sortable: true,
                    filter: true,
                    resizable: false,
                    headerStyle: 'width:120px;',
                    filterMatchMode: 'contains',
                },
                {
                    field: 'DateEvent',
                    headerText: 'Дата',
                    sortable: true,
                    filter: false,
                    resizable: false,
                    headerStyle: 'width:150px;',
                    filterMatchMode: 'contains',
                    content: row => row.DateEvent.format("YYYY-MM-DD HH:mm:ss")
                },
                {
                    field: 'EventInfo',
                    headerText: 'Информация',
                    sortable: true,
                    filter: true,
                    headerStyle: 'width:300px;',
                    filterMatchMode: 'contains',
                },
                {
                    field: 'EventInfoDetailed',
                    headerText: 'Информация с детализацией',
                    sortable: true,
                    filter: true,
                    filterMatchMode: 'contains',
                    content: row => nl2br(row.EventInfoDetailed + (row.ExceptionDetailed ? '<br />' + row.ExceptionDetailed : ''))
                },
            ],
            sortField: 'DateEvent',
            sortOrder: -1,
            lazy: true,
            datasource: function (callback, ui) {
                var requestOptions = new PrimeUiDataTableSourceRequest(ui);
                var tt = this;

                $.requestJSON("@(Url.CreateRoute<Module, ModuleController>(x => x.JournalDetailsList(Model.JournalName.IdJournal, null)))", requestOptions, function (result, message, data) {
                    if (message.length > 0) adminNotificationWindow.show([{ severity: result == JsonResult.OK ? 'info' : 'error', summary: message, detail: '' }]);
                    if (result == JsonResult.OK) {
                        var data = new JournalDetailsModel(data);
                        callback.call(tt, data.DataList);
                        eventsListTable.puidatatable('setTotalRecords', data.JournalDataCountAll);
                    }
                });
            },
            emptyMessage: 'Ничего не найдено.',
        });

        $("input#ClearJournal").click(function () {
            $(this).attr("disabled", true);
            $.requestJSON("@(Url.CreateRoute<Module, ModuleController>(x => x.JournalClear(Model.JournalName.IdJournal)))", null, function (result, message) {
                $(this).removeAttr("disabled");
                if (message.length > 0) adminNotificationWindow.show([{ severity: result == JsonResult.OK ? 'info' : 'error', summary: message, detail: '' }]);
                if (result == JsonResult.OK) {
                    eventsListTable.puidatatable("reload");
                }
            });
        });
    });
</script>

<div id="js-events-list__table"></div>

