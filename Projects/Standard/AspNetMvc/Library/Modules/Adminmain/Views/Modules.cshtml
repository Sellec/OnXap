@using OnXap.Modules.Admin
@using OnXap.Modules.Adminmain.Model
@model Modules
@{ var moduleAdmin = this.GetAppCore().Get<ModuleAdmin>(); }

<script type='text/javascript'>
    class ModulesModel {
        constructor(source) {
            var modules = source.@Html.NameOf(x => x.Registered);
            this.modules = modules.map(x => new ModulesRow(x));
        }
    }

    class ModulesRow {
        constructor(source) {
            this.id = source.@Html.NameOf(x => x.Registered.First().Id) ? Number(source.@Html.NameOf(x => x.Registered.First().Id)) : 0;
            this.caption = source.@Html.NameOf(x => x.Registered.First().Caption) ? String(source.@Html.NameOf(x => x.Registered.First().Caption)) : null;
            this.configAllowed = source.@Html.NameOf(x => x.Registered.First().IsConfigAllowed) ? Boolean(source.@Html.NameOf(x => x.Registered.First().IsConfigAllowed)) : false;
            this.type = source.@Html.NameOf(x => x.Registered.First().Type) ? String(source.@Html.NameOf(x => x.Registered.First().Type)) : null;
            this.uniqueName = source.@Html.NameOf(x => x.Registered.First().UniqueName) ? String(source.@Html.NameOf(x => x.Registered.First().UniqueName)) : null;
            this.urlName = source.@Html.NameOf(x => x.Registered.First().UrlName) ? String(source.@Html.NameOf(x => x.Registered.First().UrlName)) : null;
        }
    }

    var registered = @Model.Registered.jsobject();

    $(document).ready(function(){
        $("#block").hide();

        var model = new ModulesModel(@Model.jsobject());

        new Vue({
            el: "#js-modules",
            data: {
                filters: {},
                dataList: model.modules,
                moduleCurrent: {
                    data: null,
                    loading: false,
                    tabActive: false,
                    requestId: null,
                }
            },
            methods: {
                rowClass: row => "js-journal-events__" + row.eventLastType,
                onConfigure: function (moduleData) {
                    var component = this;
                    component.moduleCurrent.loading = true;
                    component.moduleCurrent.tabActive = true;
                    component.moduleCurrent.requestId = $("#containerForLoading").requestLoad(
                        "/@moduleAdmin.UrlName/madmin/" + moduleData.id + "/config",
                        null,
                        function (result, message, data, requestId) {
                            if (component.moduleCurrent.requestId != requestId) return;
                            component.moduleCurrent.loading = false;
                            if (message.length > 0) alert(message);
                            if (result == JsonResult.OK) {
                                component.moduleCurrent.data = moduleData;
                            }
                        }
                    );
                }
            }
        });

        changeTitle('Управление модулями');
    });
</script>
<h2>Модули</h2>

<div id="js-modules">
    <pvl-tabview>
        <pvl-tabpanel header="Список модулей">
            <pvl-datatable :value="dataList" :row-class="rowClass"
                           sort-field="caption" sort-order="true"
                           :filters="filters"
                           style="width:1200px;">
                <template #header>
                    <div style='height:20px'>Всего модулей: {{ dataList ? dataList.length : 0 }}</div>
                </template>
                <pvl-column field="id" header="№" sortable="true" header-style="width:50px;" filter-match-mode="contains">
                    <template #filter>
                        <pvl-inputtext type="text" v-model="filters['id']" class="p-column-filter"></pvl-inputtext>
                    </template>
                </pvl-column>
                <pvl-column field="caption" header="Название" sortable="true" header-style="width:200px;" filter-match-mode="contains">
                    <template #filter>
                        <pvl-inputtext type="text" v-model="filters['caption']" class="p-column-filter"></pvl-inputtext>
                    </template>
                </pvl-column>
                <pvl-column field="type" header="Query-тип модуля" sortable="true" filter-match-mode="contains">
                    <template #filter>
                        <pvl-inputtext type="text" v-model="filters['type']" class="p-column-filter"></pvl-inputtext>
                    </template>
                </pvl-column>
                <pvl-column field="uniqueName" header="Уникальное имя модуля" sortable="true" header-style="width:200px;" filter-match-mode="contains">
                    <template #filter>
                        <pvl-inputtext type="text" v-model="filters['uniqueName']" class="p-column-filter"></pvl-inputtext>
                    </template>
                </pvl-column>
                <pvl-column field="urlName" header="URL-доступное имя модуля" sortable="true" header-style="width:200px;" filter-match-mode="contains">
                    <template #filter>
                        <pvl-inputtext type="text" v-model="filters['urlName']" class="p-column-filter"></pvl-inputtext>
                    </template>
                </pvl-column>
                <pvl-column column-key="Actions" header="Действия" header-style="width:100px;">
                    <template #body="slotProps">
                        <pvl-button label="Настройки" @@click.stop="onConfigure(slotProps.data)" v-show="slotProps.data.configAllowed"></pvl-button>
                    </template>
                </pvl-column>
            </pvl-datatable>
        </pvl-tabpanel>
        <pvl-tabpanel :active.sync="moduleCurrent.tabActive" :disabled="!moduleCurrent.data || moduleCurrent.loading">
            <template slot="header">
                @*<i :class="['pi', 'pi-spinner', {'pi-spin' : moduleCurrent.loading}]"></i>*@
                <span>Настройки модуля</span>
            </template>
            <pvl-progressspinner :class="[{'hidden' : !moduleCurrent.loading}]"></pvl-progressspinner>
            <div id="containerForLoading" :class="[{'hidden' : moduleCurrent.loading}]"></div>
        </pvl-tabpanel>
    </pvl-tabview>
</div>
