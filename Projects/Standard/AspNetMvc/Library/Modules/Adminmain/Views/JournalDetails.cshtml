@using OnXap.Journaling
@using OnXap.Modules.Adminmain
@using OnXap.Modules.Adminmain.ViewModels
@model JournalDetails
@{ var formID = DateTime.Now.Ticks.ToString(); }

<style>
    .js-journal-events__@((int)EventType.CriticalError) { background-color: #f44141 !important }
    .js-journal-events__@((int)EventType.Error) { background-color: #f48341 !important }
    .js-journal-events__@((int)EventType.Warning) { background-color: #f4c741 !important }
    .js-journal-events__@((int)EventType.Info) {  }
    #js-events-list__table td { vertical-align: top; }
</style>
<script type="text/javascript">
    class JournalDetailsDataRow {
        constructor(source) {
            this.IdJournalData = Number(source.@Html.NameOf(x => x.JournalData.First().IdJournalData));
            this.EventType = Number(source.@Html.NameOf(x => x.JournalData.First().EventType));
            this.DateEvent = new moment(source.@Html.NameOf(x => x.JournalData.First().DateEvent));
            this.EventCode = Number(source.@Html.NameOf(x => x.JournalData.First().EventCode));
            this.EventInfo = String(source.@Html.NameOf(x => x.JournalData.First().EventInfo));
            this.EventInfoDetailed = source.@Html.NameOf(x => x.JournalData.First().EventInfoDetailed) ? String(source.@Html.NameOf(x => x.JournalData.First().EventInfoDetailed)) : null;
            this.ExceptionDetailed = source.@Html.NameOf(x => x.JournalData.First().ExceptionDetailed) ? String(source.@Html.NameOf(x => x.JournalData.First().ExceptionDetailed)) : null;
            this.EventInfoFull = ((this.EventInfoDetailed ? this.EventInfoDetailed + '\n' : '') + (this.ExceptionDetailed ? this.ExceptionDetailed + '\n' : '')).trimRight();
        }
    }

    class JournalDetailsModel {
        constructor(source) {
            var dataList = source.@Html.NameOf(x => x.JournalData);
            this.DataList = dataList.map(x => new JournalDetailsDataRow(x));
            this.DataCountAll = Number(source.@Html.NameOf(x => x.JournalDataCountAll));
        }
    }

    $(function () {
        //    emptyMessage: 'Ничего не найдено.',

        new Vue({
            el: "#js-events-list__table",
            components: {
                'datatable': datatable,
                'column': column,
                'inputtext': inputtext,
            },
            data: {
                filters: {},
                IsLoading: false,
                DataCountAll: @Model.JournalDataCountAll,
                DataList: null,
                LazyRequestOptions: new PrimeVueDataTableSourceRequest(),
                paginatorRows: 10,
                lazyRequestIdLatest: null
            },
            methods:
            {
                rowClass: row => "js-journal-events__" + row.EventType,
                OnPage: function (event) {
                    this.LazyRequestOptions.ApplyPagination(event);
                    this.OnLazy();
                },
                OnSort: function (event) {
                    this.LazyRequestOptions.ApplySort(event);
                    this.OnLazy();
                },
                OnFilter: function (event) {
                    //this.LazyRequestOptions.ApplySort(event);
                    //this.OnLazy();
                },
                OnLazy: function () {
                    var component = this;
                    component.IsLoading = true;

                    component.lazyRequestIdLatest = $.requestJSON("@(Url.CreateRoute<Module, ModuleController>(x => x.JournalDetailsList(Model.JournalName.IdJournal, null)))", this.LazyRequestOptions, function (result, message, data) {
                        if (component.lazyRequestIdLatest != requestId) return;
                        component.IsLoading = false;
                        if (message.length > 0) component.$toast.add({ severity: result == JsonResult.OK ? 'success' : 'error', summary: message, life: result == JsonResult.OK ? 3000 : null });
                        if (result == JsonResult.OK) {
                            var data = new JournalDetailsModel(data);
                            component.DataCountAll = data.DataCountAll;
                            component.DataList = data.DataList;
                        }
                    });
                }
            },
            watch: {
                'filters': {
                    handler: function (v1, v2) {
                        this.LazyRequestOptions.ApplyFilter(this.filters);
                        this.OnLazy();
                    },
                    deep: true
                }
            },
            mounted() {
                var component = this;
                component.$toast.removeAllGroups();

                $("input#ClearJournal").click(function () {
                    var button = $(this);
                    component.IsLoading = true;

                    button.attr("disabled", true);
                    $.requestJSON("@(Url.CreateRoute<Module, ModuleController>(x => x.JournalClear(Model.JournalName.IdJournal)))", null, function (result, message) {
                        component.IsLoading = true;
                        button.removeAttr("disabled");
                        if (message.length > 0) component.$toast.add({ severity: result == JsonResult.OK ? 'success' : 'error', summary: message, life: result == JsonResult.OK ? 3000 : null });
                        if (result == JsonResult.OK) component.OnLazy();
                    });
                });

                this.LazyRequestOptions.ApplyPagination({ first: 0, rows: this.paginatorRows });
                this.LazyRequestOptions.ApplySort({ sortField: this.sortField, sortOrder: this.sortOrder });
                this.OnLazy();
            }
        });
    });
</script>

<div id="js-events-list__table">
    <datatable :value="DataList" :paginator="true" :rows="paginatorRows" :row-class="rowClass"
               :lazy="true" :total-records="DataCountAll" :loading="IsLoading" 
               @@page="OnPage($event)" @@sort="OnSort($event)" @@filter="OnFilter($event)"
               :filters="filters"
               sort-field="DateEvent" sort-order="-1">
        <template #header>
            <div style="height:20px">@Model.JournalName.Name / <input type='button' id='ClearJournal' value='Очистить журнал' /></div>
        </template>
        <column field="EventType" header="Тип события" sortable="true" resizable="false" header-style="width:150px;" filter-match-mode="contains"></column>
        <column field="EventCode" header="Код события" sortable="true" resizable="false" header-style="width:120px;" filter-match-mode="contains">
            <template #filter><InputText type="text" v-model="filters['EventCode']" class="p-column-filter" /></template>
        </column>
        <column field="DateEvent" header="Дата" sortable="true" resizable="false" header-style="width:150px;">
            <template #body="slotProps">{{ slotProps.data.DateEvent ? slotProps.data.DateEvent.format("YYYY-MM-DD HH:mm:ss") : null }}</template>
        </column>
        <column field="EventInfo" header="Информация" sortable="true" header-style="width:300px;" filter-match-mode="contains" body-style="white-space: pre-wrap;">
            <template #filter><InputText type="text" v-model="filters['EventInfo']" class="p-column-filter" /></template>
        </column>
        <column field="EventInfoFull" header="Информация с детализацией" sortable="true" filter-match-mode="contains" body-style="white-space: pre-wrap;" header-style="width:500px;">
            <template #filter><InputText type="text" v-model="filters['EventInfoFull']" class="p-column-filter" /></template>
            <template #body="slotProps">{{ slotProps.data.EventInfoFull }}</template>
        </column>
    </datatable>
</div>
